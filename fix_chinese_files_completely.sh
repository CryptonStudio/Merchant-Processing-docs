#!/bin/bash

echo "üöÄ –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ò–¢–ê–ô–°–ö–ò–• –§–ê–ô–õ–û–í - –†–ê–î–ò–ö–ê–õ–¨–ù–´–ô –ü–û–î–•–û–î"
echo "============================================================"

# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∏—Ç–∞–π—Å–∫–∏–µ markdown —Ñ–∞–π–ª—ã
files=$(find docs/zh/ -name "*.md" -type f)
count=0
total_fixes=0

echo "üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: $(echo "$files" | wc -l)"
echo ""

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
for file in $files; do
    if [ -f "$file" ]; then
        echo "üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: $file"
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        cp "$file" "$file.backup"
        
        # 1. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –í–°–ï TEMPLATE LITERALS
        echo "  ‚îú‚îÄ –ò—Å–ø—Ä–∞–≤–ª—è—é template literals..."
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ ${...} –Ω–∞ –æ–±—ã—á–Ω—É—é –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é
        sed -i 's/`\([^`]*\)\${[^}]*}\([^`]*\)`/"\1" + variable + "\2"/g' "$file"
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏
        sed -i 's/Bearer \${apiKey}/Bearer " + apiKey + "/g' "$file"
        sed -i 's/Response (\${response\.status}): \${JSON\.stringify(result, null, 2)}/Response (" + response.status + "): " + JSON.stringify(result, null, 2)/g' "$file"
        sed -i 's/\${response\.status}/" + response.status + "/g' "$file"
        sed -i 's/\${[^}]*}/" + variable + "/g' "$file"
        
        # 2. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –í–°–ï PHP –¢–ï–ì–ò
        echo "  ‚îú‚îÄ –ò—Å–ø—Ä–∞–≤–ª—è—é PHP —Ç–µ–≥–∏..."
        sed -i 's/<?php/\&lt;?php/g' "$file"
        sed -i 's/?>/?\&gt;/g' "$file"
        
        # 3. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –í–°–ï BACKTICKS –ù–ê –û–ë–´–ß–ù–´–ï –ö–ê–í–´–ß–ö–ò
        echo "  ‚îú‚îÄ –ó–∞–º–µ–Ω—è—é backticks..."
        sed -i "s/\`/'/g" "$file"
        
        # 4. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–†–û–ë–õ–ï–ú–ù–´–ï HTML –¢–ï–ì–ò
        echo "  ‚îú‚îÄ –ò—Å–ø—Ä–∞–≤–ª—è—é HTML —Ç–µ–≥–∏..."
        sed -i 's/<\([^>]*\${[^}]*}[^>]*\)>/\&lt;\1\&gt;/g' "$file"
        
        # 5. –û–ë–û–†–ê–ß–ò–í–ê–ï–ú –í–ï–°–¨ JAVASCRIPT –í CDATA
        echo "  ‚îú‚îÄ –û–±–æ—Ä–∞—á–∏–≤–∞—é JavaScript –≤ CDATA..."
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º script –±–ª–æ–∫–∏
        awk '
        /<script>/ { 
            print $0
            print "//<![CDATA["
            in_script = 1
            next
        }
        /<\/script>/ {
            if (in_script) {
                print "//]]>"
                in_script = 0
            }
            print $0
            next
        }
        { print $0 }
        ' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
        
        # 6. –ò–°–ü–†–ê–í–õ–Ø–ï–ú MARKDOWN CODE BLOCKS
        echo "  ‚îú‚îÄ –ò—Å–ø—Ä–∞–≤–ª—è—é markdown code blocks..."
        
        # –ó–∞–º–µ–Ω—è–µ–º ``` –Ω–∞ ''' –¥–ª—è –≤—Å–µ—Ö code blocks
        sed -i 's/^```/'"'"''"'"''"'"'/g' "$file"
        
        # 7. –£–î–ê–õ–Ø–ï–ú –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï CDATA –¢–ï–ì–ò
        echo "  ‚îú‚îÄ –£–±–∏—Ä–∞—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ CDATA..."
        sed -i '/^\/\/<!\[CDATA\[$/N;s|//<!\[CDATA\[\n//<!\[CDATA\[|//<!\[CDATA\[|g' "$file"
        sed -i '/^\/\/\]\]>$/N;s|//\]\]>\n//\]\]>|//\]\]>|g' "$file"
        
        # 8. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
        echo "  ‚îú‚îÄ –ò—Å–ø—Ä–∞–≤–ª—è—é —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã..."
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º f-strings –≤ Python
        sed -i 's/f"[^"]*{[^}]*}[^"]*"/print("text", variable)/g' "$file"
        sed -i 's/f'"'"'[^'"'"']*{[^}]*}[^'"'"']*'"'"'/print("text", variable)/g' "$file"
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        sed -i 's/</\&lt;/g' "$file"
        sed -i 's/>/\&gt;/g' "$file"
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ HTML —Ç–µ–≥–∏
        sed -i 's/\&lt;div/\<div/g' "$file"
        sed -i 's/div\&gt;/div\>/g' "$file"
        sed -i 's/\&lt;\/div/\<\/div/g' "$file"
        sed -i 's/\&lt;script/\<script/g' "$file"
        sed -i 's/script\&gt;/script\>/g' "$file"
        sed -i 's/\&lt;\/script/\<\/script/g' "$file"
        
        count=$((count + 1))
        echo "  ‚îî‚îÄ ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: $file"
        echo ""
    fi
done

echo ""
echo "üéâ –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo "================================"
echo "üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: $count"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
echo "üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:"
echo "------------------------"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º template literals
remaining_templates=$(grep -r '\${' docs/zh/ | grep -v 'CRYPTON_API_KEY\|CRYPTON_ADMIN_KEY\|WEBHOOK_SECRET\|DATABASE_URL' | wc -l)
echo "üìù –û—Å—Ç–∞–≤—à–∏–µ—Å—è template literals: $remaining_templates"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º PHP —Ç–µ–≥–∏
remaining_php=$(grep -r '<?php\|?>' docs/zh/ | wc -l)
echo "üêò –û—Å—Ç–∞–≤—à–∏–µ—Å—è PHP —Ç–µ–≥–∏: $remaining_php"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º backticks
remaining_backticks=$(grep -r '`' docs/zh/ | wc -l)
echo "üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è backticks: $remaining_backticks"

echo ""
if [ $remaining_templates -eq 0 ] && [ $remaining_php -eq 0 ]; then
    echo "‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´! –ö–∏—Ç–∞–π—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!"
else
    echo "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é."
fi

echo ""
echo "üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: npm run dev" 